* generate-prompt
[[https://github.com/fimblo/generate-prompt/actions/workflows/c.yml/badge.svg]]

Simple and fast prompt for bash which can show git repo status

** What does generate-prompt do?
- It prints a useful prompt, for easy plugging into PS1.
- It can tell if you're standing in a git repo or if you're outside of
  one. Depending on the situation, it will use one of the two main
  prompt types.

[[file:recording.gif]]

** I wrote this because
- I'm a bash user, and
- bash functions to update the prompt when standing in a git repo is
  just too slow

** Showing state through colours
When inside of a git repository, the prompt will tell you what state
the repo is in through the use of colours.


| Repo name           | green  | there local and remote branches are the same |
|                     | yellow | there is a difference.                       |
| Branch name         | green  | there is nothing to commit                   |
|                     | yellow | something was added, deleted, renamed, etc   |
| Current working dir | green  | no tracked files have been modified          |
|                     | yellow | tracked file(s) have been modified           |


** Usage (basic)
Source the contents of =profile= into your bash shell. There's a lot
of stuff in there, mostly commented, but the core of it is:

#+begin_src bash
  prompt_cmd() {
    PS1="$(/path/to/generate-prompt)"
  }
  PROMPT_COMMAND=prompt_cmd
#+end_src

** Usage (More fun)
If you want to override the default prompts, here's what you can do.

*** The default prompt
=GP_DEFAULT_PROMPT= overrides the hard-coded prompt you see when not
in a git repo. It is passed as-is to stdout, so your normal PS1 prompt
can be set here.

Example:
#+begin_src bash
export GP_DEFAULT_PROMPT="\[\033[01;32m\]\u@\h\[\033[00m\] \[\033[01;34m\]\W\[\033[00m\] $ "
#+end_src


*** The git prompt
=GP_GIT_PROMPT= overrides the hard-coded git prompt you see when not
in a git repo. After some string replacements are done, it is passed
to stdout as with the default prompt.

The two colours (for unchanged and modified) can be (optionally)
overridden as well.

Example:
#+begin_src bash
export GP_GIT_PROMPT="[\pR/\pL][\pC]\n$ ";
export GP_UP_TO_DATE="\033[0;32m"
export GP_MODIFIED="\033[0;33m"
#+end_src

*** generate-prompt special instructions
- =\pR= Replaced with the repo name, coloured with state
- =\pL= Replaced with local branch name, coloured with state
- =\pC= Replaced with current working directory*, coloured with state
- =\pd= Replaced with '(a|b)', where 'a' and 'b' are the local ref's
  number of commits ahead and behind upstream ref, respectively. If
  these are both zero, the instruction is replaced with the empty
  string.
** Dependencies
- [[https://github.com/libgit2/libgit2][libgit2]]
- [[https://github.com/bats-core/bats-core][bats-core]]

** Install

- Install dependencies:
  - With homebrew: =brew install libgit2 bats-core=
  - With apt: =sudo apt install libgit2-dev bats=
- Run =make= to build generate-prompt. (tested on mac and ubuntu)
- =make local-install= installs at ~/bin
- =sudo make install= installs at /usr/local/bin
- =make clean= cleans things up.
